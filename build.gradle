plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/multi-version-control-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '6.0.0'

  // Error Prone linter
  id("net.ltgt.errorprone") version "1.1.1"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.5.7' apply false
}

repositories {
  mavenCentral()
}

dependencies {
  // https://mvnrepository.com/artifact/org.tmatesoft.svnkit/svnkit
  implementation group: 'org.tmatesoft.svnkit', name: 'svnkit', version: '1.10.1'

  // https://mvnrepository.com/artifact/org.ini4j/ini4j
  implementation group: 'org.ini4j', name: 'ini4j', version: '0.5.4'

  implementation 'org.apache.commons:commons-exec:1.3'
  implementation 'org.plumelib:options:1.0.4'
  implementation 'org.plumelib:plume-util:1.1.4'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

application {
  mainClassName = 'org.plumelib.multiversioncontrol.MultiVersionControl'
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.4.0")
  // JDK 8 support for Error Prone:
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
  options.errorprone {
    disable("ReferenceEquality") // Use Interning Checker instead.
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
    checkerFrameworkAnnotatedJDK files(cfHome + "/checker/dist/jdk8.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/multiversioncontrol/api")
  classpath = project.sourceSets.main.compileClasspath
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:0.3.0"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  main = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
}
check.dependsOn requireJavadoc

task updateUserOptions(type: Javadoc, dependsOn: 'assemble') {
  description "Updates printed documentation of command-line arguments."

  source = sourceSets.main.allJava.files.sort()
  classpath = project.sourceSets.main.compileClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.runtimeClasspath as List
  options.doclet = "org.plumelib.options.OptionsDoclet"
  options.addStringOption("docfile", "${projectDir}/src/main/java/org/plumelib/multiversioncontrol/MultiVersionControl.java")
  options.addStringOption("format", "javadoc")
  options.addStringOption("i", "-quiet")
  title = ""
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
